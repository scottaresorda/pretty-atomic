name: atomic_premium_container
on:
  workflow_dispatch:
    inputs:
      accounts_ondemand:
        description: 'Enter the accounts, separated by commas'
  #schedule:
  #  - cron: '11 12 * * *'
    #- cron: '30 8,11 * * *' #Runs at 8:30 and 11:30 UTC everyday

jobs:
  # define matrix for all executions
  # ------------------------
  DefineMatrix:
    runs-on: ubuntu-latest
    outputs:
      accounts: ${{ steps.get-accounts.outputs.IDs }}
    steps:
    #- name: Notify to Telegram
    #  uses: appleboy/telegram-action@master
    #  with:
    #    to: ${{ secrets.TELEGRAM_USERID }}
    #    token: ${{ secrets.TELEGRAM_API_TOKEN }}
    #    message: |
    #      Job for account ${{ github.actor }} - atomic_premium_container starting!
    - name: Get Accounts
      id: get-accounts
      env:
        accounts_ondemand: ${{ inputs.accounts_ondemand }}
      run: |
        if [ -z "$accounts_ondemand" ]; then
          echo "The accounts input is empty."
          echo $(echo ${{ secrets.MATRIX }} | base64 --decode) > originalData.json
          echo 'IDs<<EOF' >> $GITHUB_OUTPUT
          jq '[.[] | { the_id: .id }]' originalData.json >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          rm -f originalData.json
        else
          array=($(echo "$accounts_ondemand" | tr ',' '\n'))
          echo "array=$(echo ${array[@]})" >> $GITHUB_OUTPUT
          json="["
          for i in ${!array[@]}; do
            json=$json"{\"the_id\":\""${array[i]}"\"},"
          done
          json=${json%,}
          json=$json"]"
          echo 'IDs<<EOF' >> $GITHUB_OUTPUT
          echo $json >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        fi
  # ------------------------
  # deploy a container for the job
  wasabi:
    name: Run container
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - DefineMatrix
    strategy:
      #max-parallel: 3
      matrix:
        account: ${{ fromJSON(needs.DefineMatrix.outputs.accounts) }}
    steps:
    - uses: actions/checkout@v3
      #with:
      #  path: .env

    - name: Set Secrets
      id: sets-secrets
      run: |
        echo "$(date) | INFO  | Setup secrets ..."
        echo ${{ matrix.account.the_id }}
        echo $(echo ${{ secrets.MATRIX }} | base64 --decode) > originalData.json
        the_user=$(jq '.[] | select(.id=="${{ matrix.account.the_id }}") | .user' originalData.json)
        the_pass=$(jq '.[] | select(.id=="${{ matrix.account.the_id }}") | .pass' originalData.json)
        echo "::add-mask::$the_user"
        echo "::add-mask::$the_pass"
        
        the_user=${the_user//\"/}
        the_pass=${the_pass//\"/}

        echo "secret-user=$the_user" >> $GITHUB_OUTPUT
        echo "secret-pass=$the_pass" >> $GITHUB_OUTPUT


        echo "$(date) | INFO  | Setup proxy ..."   
        # Download the proxy list file
        curl -o "proxy_list.txt" "${{ secrets.PROXY_LIST_URL }}"

        # Initialize an empty array
        proxy_list=()

        # Read the content of the "proxy_list.txt" file line by line
        while IFS= read -r line; do
          # Append the current line to the "proxy_list" array
          proxy_list+=("$line")
        done < "proxy_list.txt"

        # Calculate the number of elements in the proxy_list
        num_proxy="${#proxy_list[@]}"

        # Ensure that the number of elements in the proxy_list is greater than zero
        if [[ num_proxy -gt 0 ]]; then
          # Set the X variable as the account ID
          X=${{ matrix.account.the_id }}

          # Sort the proxy_list array based on the IP address field
          sorted_proxy_list=($(printf '%s\n' "${proxy_list[@]}" | sort -t ':' -k1,1V))

          ## Print the sorted proxy list
          #for proxy in "${sorted_proxy_list[@]}"; do
          #  echo "$proxy"
          #done

          # Calculate the modulo of X with respect to the number of elements in sorted_proxy_list
          index=$((X % num_proxy))

          # Extract the element from the sorted_proxy_list array based on the calculated index
          proxy="${sorted_proxy_list[$index]}"

          # Split the element based on colons (:)
          IFS=":" read -r proxy_host proxy_port proxy_username proxy_password <<< "$proxy"

          echo "::add-mask::$proxy_username"
          echo "::add-mask::$proxy_password"          

          proxy_password_strip=$(echo "$proxy_password" | tr -d '[:space:]')
          echo "proxy_host=$proxy_host" >> $GITHUB_OUTPUT
          echo "proxy_port=$proxy_port" >> $GITHUB_OUTPUT
          echo "proxy_username=$proxy_username" >> $GITHUB_OUTPUT
          echo "proxy_password=$proxy_password_strip" >> $GITHUB_OUTPUT
          
          # Print the extracted values
          echo "$(date) | INFO  | Proxy settings:"   
          echo "IP: $proxy_host"
          echo "Port: $proxy_port"
          echo "User: $proxy_username"
          echo "Password: $proxy_password_strip"

        else
          echo "The proxy list is empty."
        fi
    
        # Find the .env file
        env_file=$(find . -type f -name ".env" -print -quit)
        # Function to assign or update a variable in the .env file.
        set_env_variable() {
            local variable_name=$1
            local new_value=$2
            
            # Set or update the variable in the .env file
            #sed -i "s@^$variable_name=.*@$variable_name=$new_value@" "$env_file"
            awk -v var="$variable_name" -v val="$new_value" 'BEGIN{FS=OFS="="} $1==var {$2=val} 1' "$env_file" > "$env_file.tmp" && mv "$env_file.tmp" "$env_file"


        }
        
        # assigning or updating variables in the .env file.
        set_env_variable "LOGIN" "$the_user:$the_pass"
        set_env_variable "PRXIP" "$proxy_host"
        set_env_variable "PRXPORT" "$proxy_port"
        set_env_variable "PRXUSER" "$proxy_username"
        set_env_variable "PRXPASSWORD" "$proxy_password_strip"
        set_env_variable "URL" "https://login.live.com/login.srf?wa=wsignin1.0&rpsnv=13&ct=1668632814&rver=7.3.6960.0&wp=SA_20MIN&wreply=https%3A%2F%2Faccount.live.com%2FActivity%3Fmkt%3Dit-IT%26refd%3Daccount.microsoft.com%26refp%3Dsecurity%26uaid%3Dc438f05313904ae08e4a5efbaae0d6f3&lc=1033&id=38936&mkt=it-IT&uaid=c438f05313904ae08e4a5efbaae0d6f3"
        set_env_variable "APPRISE_ALERTS" "https://discord.com/api/webhooks/1117119752326881340/qXLgdqjZD8EqgdMAW12_TX6_sWhVh78EKe2nD0U-sgLyVgcZvPNUccpxWLKxN4giX03J"


        rm -f originalData.json
        unset the_user
        unset the_pass

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.CONTAINER_USER }}
        password: ${{ secrets.CONTAINER_PASS }}

    - name: Run the Docker container
      timeout-minutes: 40
      run: |
        #echo "$(cat .env)"
        docker run --rm --env-file .env ghcr.io/furgonisangria/premium:latest

  notify:
    name: Notify
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - wasabi
    steps:
    - name: Notify to Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_USERID }}
        token: ${{ secrets.TELEGRAM_API_TOKEN }}
        message: |
          Job for account ${{ github.actor }} - atomic_premium_container was executed!
